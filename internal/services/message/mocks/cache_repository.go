// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "messenger/internal/domain/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *CacheRepository) Add(_a0 models.Message) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *CacheRepository) Delete(_a0 models.Message) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByChat provides a mock function with given fields: chatId
func (_m *CacheRepository) GetByChat(chatId uuid.UUID) ([]models.Message, error) {
	ret := _m.Called(chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetByChat")
	}

	var r0 []models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Message, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Message); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
