// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	domain "messenger/internal/domain"

	mock "github.com/stretchr/testify/mock"

	models "messenger/internal/domain/models"

	uuid "github.com/google/uuid"
)

// MessengerService is an autogenerated mock type for the MessengerService type
type MessengerService struct {
	mock.Mock
}

// Add provides a mock function with given fields: message
func (_m *MessengerService) Add(message domain.MessageAdd) (models.Message, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.MessageAdd) (models.Message, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(domain.MessageAdd) models.Message); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(models.Message)
	}

	if rf, ok := ret.Get(1).(func(domain.MessageAdd) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MessengerService) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByChat provides a mock function with given fields: chatId
func (_m *MessengerService) GetByChat(chatId uuid.UUID) ([]models.Message, error) {
	ret := _m.Called(chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetByChat")
	}

	var r0 []models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Message, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Message); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MessengerService) GetById(id uuid.UUID) (models.Message, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Message, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Message); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Message)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: message
func (_m *MessengerService) Update(message domain.MessageUpdate) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.MessageUpdate) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessengerService creates a new instance of MessengerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessengerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessengerService {
	mock := &MessengerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
