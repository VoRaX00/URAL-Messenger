// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "messenger/internal/domain/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, personIds
func (_m *Repository) Add(_a0 models.Chat, personIds []uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(_a0, personIds)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Chat, []uuid.UUID) (uuid.UUID, error)); ok {
		return rf(_a0, personIds)
	}
	if rf, ok := ret.Get(0).(func(models.Chat, []uuid.UUID) uuid.UUID); ok {
		r0 = rf(_a0, personIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Chat, []uuid.UUID) error); ok {
		r1 = rf(_a0, personIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNewUser provides a mock function with given fields: chatId, userId
func (_m *Repository) AddNewUser(chatId uuid.UUID, userId uuid.UUID) error {
	ret := _m.Called(chatId, userId)

	if len(ret) == 0 {
		panic("no return value specified for AddNewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(chatId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: chatId
func (_m *Repository) Delete(chatId uuid.UUID) error {
	ret := _m.Called(chatId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(chatId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserChats provides a mock function with given fields: userId
func (_m *Repository) GetUserChats(userId uuid.UUID) ([]uuid.UUID, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChats")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]uuid.UUID, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []uuid.UUID); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: chatId, userId
func (_m *Repository) RemoveUser(chatId uuid.UUID, userId uuid.UUID) error {
	ret := _m.Called(chatId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(chatId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 models.Chat) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Chat) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
